# Во многих соцсетях у пользователей есть возможность указать пользователей как своих друзей. Также часто существует
# система рекомендации друзей, показывающая пользователям людей, с которыми они знакомы косвенно (через кого-то
# из своих друзей), и предлагает добавить этих людей в друзей. Вам предстоит разработать систему рекомендации друзей.
# В интересующей нас соцсети n пользователей, каждому из которых присвоен уникальный id от 1 до n. У каждого
# пользователя не более 5 друзей. Очевидно, ни один пользователь не является другом самому себе, и если пользователь x
# в списке друзей у пользователя y, то и пользователь y входит в список друзей пользователя x.
# Опишем, как должен формироваться список возможных друзей для каждого пользователя.
# Для пользователя x в список должны входить такие пользователи y, что:
# - y не является другом x и не совпадает с x;
# - у пользователя y и у пользователя x есть хотя бы один общий друг;
# - не существует такого пользователя y′, который удовлетворяет первым двум ограничениям и у которого строго больше
# общих друзей с x, чем у y с x.
# Т.е. в список возможных друзей пользователя x входят все такие пользователи, не являющиеся его друзьями, для которых
# кол-во общих друзей с x максимально. Список возможных друзей может быть пустым.
# Напиши программу, которая по заданной структуре соцсети формирует списки возможных друзей для всех пользователей.
# - Входные данные
# В первой строке заданы два целых числа n и m (2≤n≤50000; 0≤m≤min(n(n−1)/2,5n/2)) —
# кол-во пользователей и кол-во пар друзей, соответственно.
# Далее следуют m строк, в каждой из которых заданы два целых числа xi и yi (1≤xi,yi≤n; xi≠yi) — очередная пара друзей.
# Каждая пара друзей задается не более одного раза; у каждого пользователя не более 5 друзей.
# - Выходные данные
# Для каждого пользователя от 1 до n выведите в отдельной строке список его возможных друзей в следующем формате:
# - если список возможных друзей пуст, выведите одно целое число 0;
# - иначе выведите id возможных друзей пользователя в возрастающем порядке.

users_count, friends_pairs_count = map(int, input().split())

friends_list = {k: set() for k in range(1, users_count+1)}
for x in range(friends_pairs_count):
    friend1, friend2 = map(int, input().split())
    friends_list[friend1].add(friend2)
    friends_list[friend2].add(friend1)

# print(friends_list)
# {1: {2, 3}, 2: {1}, 3: {4, 1}, 4: {3}, 5: set()}

poss_friends = {k: set() for k in range(1, users_count+1)}
for friend, friends in friends_list.items():
    if friends:
        for f in friends:
            poss = friends_list[f] - friends - {friend}
            for i in poss:
                poss_friends[friend].add(i)

# print(poss_friends)
# {1: {2, 3}, 2: {1}, 3: {4, 1}, 4: {3}, 5: set()}

for friend, friends in poss_friends.items():
    if not friends:
        print(0)
        continue
    if len(friends) == 1:
        print(*friends)
        continue
    comm_max = 0
    comm_cnt = {}
    # {2: {1, 3}, 3: {4, 5}}
    for f in friends:
        comm_friends = friends_list[f] & friends_list[friend]
        comm_cnt[f] = comm_friends
        comm_max = len(comm_friends) if len(comm_friends) > comm_max else comm_max
    comm_max_friends = sorted(k for k, v in comm_cnt.items() if len(v) == comm_max)
    print(*comm_max_friends)
